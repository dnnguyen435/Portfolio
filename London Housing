# Let's import the pandas, numpy libraries as pd, and np respectively. 
import pandas as pd
import numpy as np

# Load the pyplot collection of functions from matplotlib, as plt 
import matplotlib.pyplot as plt

# First, make a variable called url_LondonHousePrices, and assign it the following link, enclosed in quotation-marks as a string:
# https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls

url_LondonHousePrices = "https://data.london.gov.uk/download/uk-house-price-index/70ac0766-8902-4eb5-aab5-01951aaed773/UK%20House%20price%20index.xls"

# The dataset we're interested in contains the Average prices of the houses, and is actually on a particular sheet of the Excel file. 
# As a result, we need to specify the sheet name in the read_excel() method.
# Put this data into a variable called properties.  
properties = pd.read_excel(url_LondonHousePrices, sheet_name='Average price', index_col= None)

properties.shape
properties.head()

properties_T = properties.T

properties_T.index

properties_T = properties_T.reset_index()

properties_T.index

properties_T.columns = properties_T.iloc[0]

properties_T = properties_T.drop(0)

properties_T.head()

properties_T = properties_T.rename(columns = {'Unnamed: 0':'London_Borough', pd.NaT: 'ID'})

properties_T.head()

clean_properties = pd.melt(properties_T, id_vars=['London_Borough', 'ID'])
clean_properties = clean_properties.rename(columns = {0: 'Month', 'value': 'Average_price'})
clean_properties.head()

clean_properties['Average_price'] = pd.to_numeric(clean_properties['Average_price'])
clean_properties.dtypes

clean_properties.count()

clean_properties['London_Borough'].unique()
NaNFreeDF1 = clean_properties[clean_properties['Average_price'].notna()]
NaNFreeDF2 = clean_properties.dropna()
NaNFreeDF2['London_Borough'].unique()
nonBoroughs = ['Inner London',
       'Outer London', 'NORTH EAST', 'NORTH WEST', 'YORKS & THE HUMBER',
       'EAST MIDLANDS', 'WEST MIDLANDS', 'EAST OF ENGLAND', 'LONDON',
       'SOUTH EAST', 'SOUTH WEST', 'England']
NaNFreeDF2 = NaNFreeDF2[~NaNFreeDF2.London_Borough.isin(nonBoroughs)]
NaNFreeDF2.head()
df= NaNFreeDF2
df.head()
df.dtypes

barnet_prices = df[df['London_Borough'] == 'Barnet']

ax = barnet_prices.plot(kind='line', y= 'Average_price', x= 'Month')

ax.set_ylabel('Price')

df['Year'] = df['Month'].apply(lambda t: t.year)
df.tail()

dfg = df.groupby(by=['London_Borough', 'Year']).mean()
dfg.sample(10)

dfg = dfg.reset_index()
dfg.head()

def create_price_ratio(d):
    y1998 = float(d['Average_price'][d['Year']==1998])
    y2018 = float(d['Average_price'][d['Year']==2018])
    ratio = [y2018/y1998]
    return ratio
create_price_ratio(dfg[dfg['London_Borough'] == 'Barking & Dagenham'])

final = {}

for b in dfg['London_Borough'].unique():
    borough = dfg[dfg['London_Borough']== b]
    final[b] = create_price_ratio(borough)
print(final)

df_ratios = pd.DataFrame(final)
df_ratios.head()

df_ratios_T = df_ratios.T
df_ratios = df_ratios_T.reset_index()
df_ratios.head()

df_ratios.rename(columns={'index':'Borough', 0:'2018'}, inplace=True)
df_ratios.head()

top_15 = df_ratios.sort_values(by='2018', ascending = False).head(15)

print(top_15)

ax = top_15[['Borough', '2018']].plot(kind='bar')

ax.set_xticklabels(top_15.Borough)

dfg.max()

top_15_table = pd.melt(top_15, id_vars= ['Borough'])
print(top_15_table)

